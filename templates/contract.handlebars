/* tslint:disable */
import Web3 from 'web3';
import { BigNumber } from 'bignumber.js';
import { Contract, Tx } from 'web3/types';

export interface IPayableTxParams extends Tx {
  value: string | number;
}

export class TypeChainContract {
  public readonly web3Contract: Contract;
  public readonly address: string;

  constructor(
    web3: Web3,
    address: string,
    public readonly contractAbi: any[]
  ) {
    this.address = address.toString();
    this.web3Contract = new web3.eth.Contract(contractAbi, address);
  }
}

export class DeferredTransactionWrapper<T extends Tx> {
  constructor(
    private readonly parentContract: TypeChainContract,
    private readonly methodName: string,
    private readonly methodArgs: any[]
  ) { }

  send(params: T, customWeb3?: Web3) {
    return this.getMethod(customWeb3).send(params);
  }

  estimateGas() {
    return this.getMethod().estimateGas();
  }

  private getMethod(customWeb3?: Web3) {
    let contract = this.parentContract.web3Contract;

    if (customWeb3) {
      contract = new customWeb3.eth.Contract(this.parentContract.contractAbi, this.parentContract.address);
    }

    return contract.methods[this.methodName](...this.methodArgs);
  }
}

export class {{contractName}} extends TypeChainContract {
  public constructor(adapter, address: string) {
    const abi = {{{abi}}};
    super(adapter, address, abi);
  }

  {{#each methods}}
  {{#this.constant}}
  {{> call}}
  {{/this.constant}}
  {{^this.constant}}
  {{> txn}}
  {{/this.constant}}

  {{/each}}
}
